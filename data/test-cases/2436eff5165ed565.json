{
  "uid" : "2436eff5165ed565",
  "name" : "test_01",
  "fullName" : "Session.tests.Get_active_sessions.test_get_active_sessions.TestGetActiveSessions#test_01",
  "historyId" : "ef9a38e0abbb10305f8f4329bbe22a46",
  "time" : {
    "start" : 1740069374102,
    "stop" : 1740069374694,
    "duration" : 592
  },
  "description" : "Запрос сессий пользователя (авторизованный пользователь)",
  "descriptionHtml" : "<p>Запрос сессий пользователя (авторизованный пользователь)</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_get_active_sessions.TestGetActiveSessions object at 0x7fea67146ea0>\nauth_fixture = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5YzA1ZGUwNC03MDU5LTQ5YmMtOWJmOC1mY2M4Njk4MzUyNDUiLCJhdWQiOlsiZmFzdGFwaS11c2VyczphdXRoIl0sImV4cCI6MTc0MDA3Mjk3M30.498b9zsMxZ_FO08Kkmi1jOAWvnFBcJTe5HHIj3DpDBA'\n\n    @allure.description('Запрос сессий пользователя (авторизованный пользователь)')\n    def test_01(self, auth_fixture):\n        \"\"\"Авторизация\"\"\"\n        access_token = auth_fixture\n    \n        \"\"\"Запрос сессий\"\"\"\n        result = SessionsMethods.get_active_sessions(access_token)\n    \n        \"\"\"Проверка статус кода\"\"\"\n        Checking.check_statuscode(result, 200)\n        print(result.json())\n    \n        \"\"\"Проверка обязательных полей\"\"\"\n>       SessionPayloads.check_required_fields(result, SessionPayloads.get_payloads)\n\nSession/tests/Get_active_sessions/test_get_active_sessions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [200]>\nrequired_fields = {'data': [{'client': 'string', 'device_id': 'string', 'last_active': 'string', 'location': 'string', ...}], 'meta': {}}\n\n    @staticmethod\n    def check_required_fields(result, required_fields):\n        with allure.step('Проверка наличия обязательных полей'):\n            result_text = result.text\n            data = json.loads(result_text)\n    \n            for field in required_fields:\n                assert field in data, f'обязательное поле {field} отсутствует'\n    \n            for field in required_fields['data']:\n                for i_field in field:\n>                   assert i_field in data['data'][0]\nE                   AssertionError\n\nSession/methods/payloads.py:31: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "auth_fixture",
    "time" : {
      "start" : 1740069370981,
      "stop" : 1740069374102,
      "duration" : 3121
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Авторизация",
      "time" : {
        "start" : 1740069370981,
        "stop" : 1740069374101,
        "duration" : 3120
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Проверка статус кода",
      "time" : {
        "start" : 1740069374102,
        "stop" : 1740069374102,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 2,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "Запрос сессий пользователя (авторизованный пользователь)",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_get_active_sessions.TestGetActiveSessions object at 0x7fea67146ea0>\nauth_fixture = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5YzA1ZGUwNC03MDU5LTQ5YmMtOWJmOC1mY2M4Njk4MzUyNDUiLCJhdWQiOlsiZmFzdGFwaS11c2VyczphdXRoIl0sImV4cCI6MTc0MDA3Mjk3M30.498b9zsMxZ_FO08Kkmi1jOAWvnFBcJTe5HHIj3DpDBA'\n\n    @allure.description('Запрос сессий пользователя (авторизованный пользователь)')\n    def test_01(self, auth_fixture):\n        \"\"\"Авторизация\"\"\"\n        access_token = auth_fixture\n    \n        \"\"\"Запрос сессий\"\"\"\n        result = SessionsMethods.get_active_sessions(access_token)\n    \n        \"\"\"Проверка статус кода\"\"\"\n        Checking.check_statuscode(result, 200)\n        print(result.json())\n    \n        \"\"\"Проверка обязательных полей\"\"\"\n>       SessionPayloads.check_required_fields(result, SessionPayloads.get_payloads)\n\nSession/tests/Get_active_sessions/test_get_active_sessions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [200]>\nrequired_fields = {'data': [{'client': 'string', 'device_id': 'string', 'last_active': 'string', 'location': 'string', ...}], 'meta': {}}\n\n    @staticmethod\n    def check_required_fields(result, required_fields):\n        with allure.step('Проверка наличия обязательных полей'):\n            result_text = result.text\n            data = json.loads(result_text)\n    \n            for field in required_fields:\n                assert field in data, f'обязательное поле {field} отсутствует'\n    \n            for field in required_fields['data']:\n                for i_field in field:\n>                   assert i_field in data['data'][0]\nE                   AssertionError\n\nSession/methods/payloads.py:31: AssertionError",
    "steps" : [ {
      "name" : "Получение списка активных сессий",
      "time" : {
        "start" : 1740069374103,
        "stop" : 1740069374694,
        "duration" : 591
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Проверка статус кода",
      "time" : {
        "start" : 1740069374694,
        "stop" : 1740069374694,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Проверка наличия обязательных полей",
      "time" : {
        "start" : 1740069374694,
        "stop" : 1740069374694,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError\n",
      "statusTrace" : "  File \"/Budget_api/Session/methods/payloads.py\", line 31, in check_required_fields\n    assert i_field in data['data'][0]\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "953ebcb497a9fc51",
      "name" : "stdout",
      "source" : "953ebcb497a9fc51.txt",
      "type" : "text/plain",
      "size" : 1215
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 3,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Get/active_sessions/ Получение списка активных сессий пользователя"
  }, {
    "name" : "tag",
    "value" : "Session"
  }, {
    "name" : "parentSuite",
    "value" : "Session.tests.Get_active_sessions"
  }, {
    "name" : "suite",
    "value" : "test_get_active_sessions"
  }, {
    "name" : "subSuite",
    "value" : "TestGetActiveSessions"
  }, {
    "name" : "host",
    "value" : "d7de93ca18d9"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Session.tests.Get_active_sessions.test_get_active_sessions"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "Session" ]
  },
  "source" : "2436eff5165ed565.json",
  "parameterValues" : [ ]
}